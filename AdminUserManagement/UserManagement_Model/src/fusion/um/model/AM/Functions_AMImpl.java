package fusion.um.model.AM;

import fusion.um.model.AM.common.Functions_AM;
import fusion.um.model.ROVO.Dynamic_ROVOImpl;
import fusion.um.model.ROVO.Funtions_ROVOImpl;
import fusion.um.model.VO.FuncApprLevels_VOImpl;
import fusion.um.model.VO.FuncApprovals_VOImpl;
import fusion.um.model.VO.FuncChecklist_VOImpl;
import fusion.um.model.VO.XxfndReportParamsVoImpl;

import java.util.ArrayList;

import java.util.HashMap;
import java.util.Map;

import javax.faces.model.SelectItem;

import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 25 18:38:32 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class Functions_AMImpl extends ApplicationModuleImpl implements Functions_AM {
    /**
     * This is the default constructor (do not remove).
     */
    public Functions_AMImpl() {
    }

    /**
     * Container's getter for Functions_VO1.
     * @return Functions_VO1
     */
    public ViewObjectImpl getFunctions_VO1() {
        return (ViewObjectImpl)findViewObject("Functions_VO1");
    }

    /**
     * Container's getter for FuncApprLevels_VO1.
     * @return FuncApprLevels_VO1
     */
    public FuncApprLevels_VOImpl getFuncApprLevels_VO1() {
        return (FuncApprLevels_VOImpl)findViewObject("FuncApprLevels_VO1");
    }

    /**
     * Container's getter for FuncApprovals_VO1.
     * @return FuncApprovals_VO1
     */
    public FuncApprovals_VOImpl getFuncApprovals_VO1() {
        return (FuncApprovals_VOImpl)findViewObject("FuncApprovals_VO1");
    }

    /**
     * Container's getter for Funtions_ROVO1.
     * @return Funtions_ROVO1
     */
    public Funtions_ROVOImpl getFuntions_ROVO1() {
        return (Funtions_ROVOImpl)findViewObject("Funtions_ROVO1");
    }

    /**
     * Container's getter for Level_Type_STATVO1.
     * @return Level_Type_STATVO1
     */
    public ViewObjectImpl getLevel_Type_STATVO1() {
        return (ViewObjectImpl)findViewObject("Level_Type_STATVO1");
    }

    /**
     * Container's getter for FuncChecklist_VO1.
     * @return FuncChecklist_VO1
     */
    public FuncChecklist_VOImpl getFuncChecklist_VO1() {
        return (FuncChecklist_VOImpl)findViewObject("FuncChecklist_VO1");
    }

    /**
     * Container's getter for XxfndReportParamsVo.
     * @return XxfndReportParamsVo
     */
    public XxfndReportParamsVoImpl getXxfndReportParamsVo() {
        return (XxfndReportParamsVoImpl)findViewObject("XxfndReportParamsVo");
    }

    /**
     * Container's getter for Function_ApprovalLevel_VL1.
     * @return Function_ApprovalLevel_VL1
     */
    public ViewLinkImpl getFunction_ApprovalLevel_VL1() {
        return (ViewLinkImpl)findViewLink("Function_ApprovalLevel_VL1");
    }

    /**
     * Container's getter for FuncApprovalLevel_Approval_VL1.
     * @return FuncApprovalLevel_Approval_VL1
     */
    public ViewLinkImpl getFuncApprovalLevel_Approval_VL1() {
        return (ViewLinkImpl)findViewLink("FuncApprovalLevel_Approval_VL1");
    }

    /**
     * Container's getter for FuncCheckList_VL1.
     * @return FuncCheckList_VL1
     */
    public ViewLinkImpl getFuncCheckList_VL1() {
        return (ViewLinkImpl)findViewLink("FuncCheckList_VL1");
    }
    
    /**
     * Container's getter for Reports_ROVO1.
     * @return Reports_ROVO1
     */
    public ViewObjectImpl getReports_ROVO1() {
        return (ViewObjectImpl)findViewObject("Reports_ROVO1");
    }

    /**
     * Container's getter for Dynamic_ROVO1.
     * @return Dynamic_ROVO1
     */
    public Dynamic_ROVOImpl getDynamic_ROVO1() {
        return (Dynamic_ROVOImpl)findViewObject("Dynamic_ROVO1");
    }
    
    public ArrayList getLOVValues(String tableName,String value,String displayValue,String lookupType) {
//            System.out.println("called getLOVValues");
        String sqlStatement = null;
        if(lookupType==null){
           sqlStatement = "SELECT "+value+","+displayValue+" from "+tableName;
        }
        else{
           sqlStatement = "SELECT LOOKUP_VALUE_NAME,LOOKUP_VALUE_NAME_DISP FROM XXFND_LOOKUP_VALUES WHERE LOOKUP_TYPE_ID=(SELECT LOOKUP_TYPE_ID FROM XXFND_LOOKUP_TYPES WHERE LOOKUP_TYPE_NAME='"+lookupType+"')";
        }
//         System.out.println("called getLOVValues:sqlStatement->"+sqlStatement);
         ViewObject dynamicVO = this.findViewObject("Dynamic_ROVO1");  
         dynamicVO.remove();  
         dynamicVO = this.createViewObjectFromQueryStmt("Dynamic_ROVO1", sqlStatement);  
         dynamicVO.setRangeSize(-1);
         dynamicVO.executeQuery();
    //         System.out.println("called getLOVValues:get estimated row count->"+dynamicVO.getEstimatedRowCount());
         Row[] rows = dynamicVO.getAllRowsInRange();
         Row row;
         ArrayList selectItemList = new ArrayList();
         for(int i=0;i<rows.length;i++){
             SelectItem obj = new SelectItem();
             row = rows[i];
             obj.setValue(row.getAttribute(0)!=null ? row.getAttribute(0).toString() : null);
             obj.setLabel(row.getAttribute(1)!=null ? row.getAttribute(1).toString() : null);
             selectItemList.add(obj);
         }
    //         System.out.println("called getLOVValues return");
         return selectItemList;
       }

    /**
     * Container's getter for LookUp_ROVO1.
     * @return LookUp_ROVO1
     */
    public ViewObjectImpl getLookUp_ROVO1() {
        return (ViewObjectImpl)findViewObject("LookUp_ROVO1");
    }
    
    public Map applicationSessionSetup(){
        Map sessionMap = new HashMap<String,String>();
        ViewObject vo = this.getLookUp_ROVO1();
        vo.applyViewCriteria(vo.getViewCriteriaManager().getViewCriteria("findByTransCategoryVC"));
        vo.setNamedWhereClauseParam("pLookupTypeName", "PROFILE_VALUES");
        vo.setRangeSize(-1);
        vo.executeQuery();
        Row[] rows = vo.getAllRowsInRange();
        Row row;
        for(int i=0;i<rows.length;i++){
            row=rows[i];
            sessionMap.put(row.getAttribute("LookupValueName"), row.getAttribute("LookupAddlValue"));
        }
        System.out.println("Session Map:"+sessionMap);
        return sessionMap;
    }
}
